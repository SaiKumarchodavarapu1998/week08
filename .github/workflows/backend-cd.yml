name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'week08'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'deakinuni'
      aks_acr_name:
        description: 'Name of ACR (resource name, not FQDN)'
        required: true
        default: 'week08'

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP: ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        id: azure_login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials \
            --resource-group "${{ github.event.inputs.aks_resource_group }}" \
            --name "${{ github.event.inputs.aks_cluster_name }}" \
            --overwrite-existing

      - name: Attach ACR to AKS (so pods can pull images)
        run: |
          az aks update \
            --name "${{ github.event.inputs.aks_cluster_name }}" \
            --resource-group "${{ github.event.inputs.aks_resource_group }}" \
            --attach-acr "${{ github.event.inputs.aks_acr_name }}"

      # ----------- DO NOT cd; detect the right folder instead -----------
      - name: Locate k8s manifests directory
        id: locate_manifests
        shell: bash
        run: |
          set -euo pipefail
          # Try common locations first
          for d in "k8s" "week08/k8s" "infra/k8s" "./k8s"; do
            if [ -d "$d" ]; then
              echo "Found manifests dir: $d"
              echo "MANIFEST_DIR=$d" >> $GITHUB_ENV
              exit 0
            fi
          done
          # Auto-detect by known files
          CANDIDATE="$(git ls-files | grep -E '/k8s/(product-service|order-service)\.yaml$' | head -n1 || true)"
          if [ -n "$CANDIDATE" ]; then
            d="$(dirname "$CANDIDATE")"
            echo "Auto-detected manifests dir: $d"
            echo "MANIFEST_DIR=$d" >> $GITHUB_ENV
            exit 0
          fi
          echo "❌ Could not find k8s manifests directory in the repository" >&2
          exit 1
      # ------------------------------------------------------------------

      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        shell: bash
        run: |
          set -euo pipefail
          echo "Deploying backend infrastructure from $MANIFEST_DIR ..."
          ls -la "$MANIFEST_DIR"

          # ConfigMap
          if [ -f "$MANIFEST_DIR/configmaps.yaml" ]; then
            kubectl apply -f "$MANIFEST_DIR/configmaps.yaml"
          else
            echo "❌ $MANIFEST_DIR/configmaps.yaml not found" >&2
            exit 1
          fi

          # Secrets (support secrets.yaml or secret.yaml)
          if [ -f "$MANIFEST_DIR/secrets.yaml" ]; then
            kubectl apply -f "$MANIFEST_DIR/secrets.yaml"
          elif [ -f "$MANIFEST_DIR/secret.yaml" ]; then
            kubectl apply -f "$MANIFEST_DIR/secret.yaml"
          else
            echo "❌ Neither secrets.yaml nor secret.yaml found in $MANIFEST_DIR" >&2
            exit 1
          fi

          # Databases
          if [ -f "$MANIFEST_DIR/product-db.yaml" ]; then
            kubectl apply -f "$MANIFEST_DIR/product-db.yaml"
          else
            echo "❌ $MANIFEST_DIR/product-db.yaml not found" >&2
            exit 1
          fi

          if [ -f "$MANIFEST_DIR/order-db.yaml" ]; then
            kubectl apply -f "$MANIFEST_DIR/order-db.yaml"
          else
            echo "❌ $MANIFEST_DIR/order-db.yaml not found" >&2
            exit 1
          fi

      - name: Deploy Backend Microservices (Product, Order)
        shell: bash
        run: |
          set -euo pipefail
          echo "Deploying backend microservices from $MANIFEST_DIR ..."
          if [ -f "$MANIFEST_DIR/product-service.yaml" ]; then
            kubectl apply -f "$MANIFEST_DIR/product-service.yaml"
          else
            echo "❌ $MANIFEST_DIR/product-service.yaml not found" >&2
            exit 1
          fi
          if [ -f "$MANIFEST_DIR/order-service.yaml" ]; then
            kubectl apply -f "$MANIFEST_DIR/order-service.yaml"
          else
            echo "❌ $MANIFEST_DIR/order-service.yaml not found" >&2
            exit 1
          fi

      - name: Wait for Backend LoadBalancer IPs
        shell: bash
        run: |
          set -euo pipefail
          echo "Waiting for Product, Order LoadBalancer IPs to be assigned (up to 5 minutes)..."
          PRODUCT_IP=""
          ORDER_IP=""
          for i in $(seq 1 60); do
            echo "Attempt $i/60 to get IPs..."
            PRODUCT_IP=$(kubectl get service product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get service order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "All backend LoadBalancer IPs assigned!"
              echo "Product Service IP: $PRODUCT_IP"
              echo "Order Service IP: $ORDER_IP"
              break
            fi
            sleep 5
          done
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Error: One or more LoadBalancer IPs not assigned after timeout."
            exit 1
          fi
          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout from Azure (never fail)
        if: ${{ always() }}
        run: az logout || true
